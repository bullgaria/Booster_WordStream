@page "/WordStream"

@using Booster_WordStream.Models;
@using Booster_WordStream.Controllers
@using Booster_WordStream.Controllers.WordStatistics;

<h1>Word Stream</h1>

<br />

<button class="btn btn-primary" @onclick="StartStream">Start Stream</button>
<button class="btn btn-primary" @onclick="StopStream">Stop Stream</button>
<button class="btn btn-primary" @onclick="ResetStream">Reset Stream</button>

<br />
<br />

<div style="display: grid; align-items: center; grid-gap: 10px; grid-auto-flow: column; grid-template-columns: 1fr 1fr;">
    <div style="display: flex; align-self: start; flex-flow: column; height: 100%;">
        <div style="display: grid; align-items: center; grid-gap: 10px; grid-auto-flow: column; grid-template-columns: 1fr 1fr; height: 100%;">
            <b>Number of Chars: @word_controls.stream_data.GetNumChars()</b>
            <b>Number of Words: @word_controls.stream_data.GetNumWords()</b>
        </div>
        <table>
            <tr>
                <th>Frequent Words</th>
                <th>Occurances</th>
            </tr>
            @foreach(var word_data in frequent_words.GetWords())
            {
                <tr>
                    <td>@word_data.Key</td>
                    <td>@word_data.Value.ToString()</td>
                </tr>
            }
        </table>
    </div>    
    <div style="align-self: start; height: 100%;">
        <table style="height: 100%;">
            <tr>
                <th>Large Words</th>
                <th>Length</th>
            </tr>
            @foreach(var word_data in large_words.GetWords())
            {
                <tr>
                    <td>@word_data.Key</td>
                    <td>@word_data.Value.ToString()</td>
                </tr>
            }
            <br />
            <tr>
                <th>Small Words</th>
                <th>Length</th>
            </tr>
            @foreach(var word_data in small_words.GetWords())
            {
                <tr>
                    <td>@word_data.Key</td>
                    <td>@word_data.Value.ToString()</td>
                </tr>
            }
        </table>
    </div>
</div>

@code {
    private static int RefreshRate = 20;  // FPS

    private WordStreamController<WordCollectionData> word_controls { get; } = new(RefreshRate);

    private System.Threading.Timer refresh_timer;

    private FindLarge large_words = new FindLarge(5);
    private FindSmall small_words = new FindSmall(5);
    private FindFrequent frequent_words = new FindFrequent(10);

    private void StartStream()
    {
        var cur_stream_state = word_controls.GetStreamState();
        if (cur_stream_state == StreamState.Running) return;

        if (cur_stream_state == StreamState.Off) {
            // add word stats controllers
            word_controls.stream_data.AddStat(ref large_words);
            word_controls.stream_data.AddStat(ref small_words);
            word_controls.stream_data.AddStat(ref frequent_words);

            word_controls.StartStream().ConfigureAwait(false);
        }
        else if (cur_stream_state == StreamState.Stopped) {
            word_controls.StartStream().ConfigureAwait(false);
        }
    }

    protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		refresh_timer = new System.Threading.Timer((object x) =>
		{
            if (word_controls.GetStreamState() == StreamState.Running) {
                StateHasChanged();
            }
		}, null, 0, 1000 / RefreshRate);
	}

    private void StopStream()
    {
        word_controls.StopStream();
    }

    private void ResetStream()
    {
        word_controls.ResetStream();
    }
}
